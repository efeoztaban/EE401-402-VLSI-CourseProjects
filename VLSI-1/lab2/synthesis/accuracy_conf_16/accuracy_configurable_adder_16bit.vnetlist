
module accuracy_configurable_adder_16bit_DW01_add_5 ( A, B, CI, SUM, CO );
  input [7:0] A;
  input [7:0] B;
  output [7:0] SUM;
  input CI;
  output CO;
  wire   n1, n3, n5, n6, n7, n8, n11, n13, n16, n18, n20, n22, n24, n25, n27,
         n28, n31, n32, n34, n35, n38, n39, n41, n44, n46, n47, n48, n80, n82,
         n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96,
         n97, n98, n99, n100, n101, n102, n103, n104, n105;

  XOR2X1 U26 ( .IN1(n83), .IN2(n5), .Q(SUM[4]) );
  NOR2X4 U38 ( .IN1(A[3]), .IN2(B[3]), .QN(n31) );
  XOR2X1 U40 ( .IN1(n105), .IN2(n7), .Q(SUM[2]) );
  NAND2X4 U45 ( .IN1(A[2]), .IN2(B[2]), .QN(n35) );
  XOR2X1 U46 ( .IN1(n8), .IN2(n82), .Q(SUM[1]) );
  NAND2X4 U52 ( .IN1(A[1]), .IN2(B[1]), .QN(n39) );
  ISOLORX2 U61 ( .D(n87), .ISO(n88), .Q(n86) );
  NOR2X1 U62 ( .IN1(n1), .IN2(n13), .QN(n89) );
  OR2X1 U63 ( .IN1(A[4]), .IN2(B[4]), .Q(n90) );
  NOR2X2 U64 ( .IN1(n89), .IN2(n80), .QN(n102) );
  INVX2 U65 ( .IN(n90), .QN(n27) );
  NOR2X2 U66 ( .IN1(n85), .IN2(n27), .QN(n22) );
  NAND2X0 U67 ( .IN1(n22), .IN2(n104), .QN(n13) );
  NAND2X2 U68 ( .IN1(A[4]), .IN2(B[4]), .QN(n28) );
  INVX0 U69 ( .IN(n22), .QN(n20) );
  NAND2X1 U70 ( .IN1(A[5]), .IN2(B[5]), .QN(n25) );
  NOR2X2 U71 ( .IN1(A[5]), .IN2(B[5]), .QN(n24) );
  NAND2X0 U72 ( .IN1(n104), .IN2(n18), .QN(n3) );
  INVX0 U73 ( .IN(n86), .QN(n84) );
  INVX0 U74 ( .IN(n85), .QN(n44) );
  NOR2X0 U75 ( .IN1(n24), .IN2(n28), .QN(n87) );
  NBUFFX2 U76 ( .IN(n24), .Q(n85) );
  AO21X1 U77 ( .IN1(n86), .IN2(n104), .IN3(n16), .Q(n80) );
  AND2X1 U78 ( .IN1(n100), .IN2(n82), .Q(SUM[0]) );
  NBUFFX2 U79 ( .IN(n41), .Q(n82) );
  NAND2X2 U80 ( .IN1(A[0]), .IN2(B[0]), .QN(n41) );
  INVX0 U81 ( .IN(n25), .QN(n88) );
  OA21X2 U82 ( .IN1(n20), .IN2(n1), .IN3(n84), .Q(n96) );
  OA21X2 U83 ( .IN1(n98), .IN2(n97), .IN3(n99), .Q(n83) );
  ISOLORX1 U84 ( .D(A[6]), .ISO(B[6]), .Q(n104) );
  NOR2X2 U85 ( .IN1(A[2]), .IN2(B[2]), .QN(n34) );
  NOR2X1 U86 ( .IN1(n27), .IN2(n83), .QN(n91) );
  INVX0 U87 ( .IN(n18), .QN(n16) );
  NOR2X2 U88 ( .IN1(n91), .IN2(n92), .QN(n95) );
  INVX0 U89 ( .IN(n28), .QN(n92) );
  NAND2X0 U90 ( .IN1(A[6]), .IN2(B[6]), .QN(n18) );
  XOR2X1 U91 ( .IN1(n95), .IN2(n93), .Q(SUM[5]) );
  NAND2X0 U92 ( .IN1(n44), .IN2(n25), .QN(n93) );
  NAND2X0 U93 ( .IN1(n90), .IN2(n28), .QN(n5) );
  XOR2X1 U94 ( .IN1(n94), .IN2(n6), .Q(SUM[3]) );
  OA21X1 U95 ( .IN1(n34), .IN2(n105), .IN3(n35), .Q(n94) );
  INVX0 U96 ( .IN(n34), .QN(n47) );
  XOR2X1 U97 ( .IN1(n96), .IN2(n3), .Q(SUM[6]) );
  NAND2X0 U98 ( .IN1(n46), .IN2(n32), .QN(n6) );
  OA21X2 U99 ( .IN1(n97), .IN2(n98), .IN3(n99), .Q(n1) );
  OA21X2 U100 ( .IN1(n41), .IN2(n38), .IN3(n39), .Q(n97) );
  OR2X1 U101 ( .IN1(n34), .IN2(n31), .Q(n98) );
  OA21X2 U102 ( .IN1(n35), .IN2(n31), .IN3(n32), .Q(n99) );
  ISOLORX1 U103 ( .D(A[0]), .ISO(B[0]), .Q(n100) );
  ISOLORX1 U104 ( .D(A[7]), .ISO(B[7]), .Q(n101) );
  XNOR2X1 U105 ( .IN1(n102), .IN2(n103), .Q(SUM[7]) );
  AND2X1 U106 ( .IN1(n101), .IN2(n11), .Q(n103) );
  NAND2X0 U107 ( .IN1(n47), .IN2(n35), .QN(n7) );
  NAND2X0 U108 ( .IN1(n48), .IN2(n39), .QN(n8) );
  NAND2X2 U109 ( .IN1(B[3]), .IN2(A[3]), .QN(n32) );
  NAND2X0 U110 ( .IN1(A[7]), .IN2(B[7]), .QN(n11) );
  OA21X1 U111 ( .IN1(n82), .IN2(n38), .IN3(n39), .Q(n105) );
  NOR2X4 U112 ( .IN1(A[1]), .IN2(B[1]), .QN(n38) );
  INVX0 U113 ( .IN(n31), .QN(n46) );
  INVX0 U114 ( .IN(n38), .QN(n48) );
endmodule


module accuracy_configurable_adder_16bit_DW01_add_6 ( A, B, CI, SUM, CO );
  input [7:0] A;
  input [7:0] B;
  output [7:0] SUM;
  input CI;
  output CO;
  wire   n1, n5, n7, n9, n10, n12, n14, n16, n18, n20, n21, n23, n25, n26, n27,
         n28, n29, n30, n31, n32, n33, n38, n65, n66, n67, n68, n69, n70, n71,
         n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85,
         n86;

  XOR2X1 U26 ( .IN1(n85), .IN2(n5), .Q(SUM[4]) );
  OAI21X2 U34 ( .IN1(n27), .IN2(n30), .IN3(n28), .QN(n26) );
  AND2X1 U46 ( .IN1(n74), .IN2(n38), .Q(n18) );
  INVX2 U47 ( .IN(n23), .QN(n38) );
  ISOLORX1 U48 ( .D(A[7]), .ISO(B[7]), .Q(n80) );
  NAND2X0 U49 ( .IN1(A[6]), .IN2(B[6]), .QN(n14) );
  NAND2X0 U50 ( .IN1(n38), .IN2(n73), .QN(n5) );
  ISOLANDX1 U51 ( .D(n21), .ISO(n20), .Q(n84) );
  NOR2X4 U52 ( .IN1(A[5]), .IN2(B[5]), .QN(n20) );
  INVX2 U53 ( .IN(n20), .QN(n74) );
  ISOLORX1 U54 ( .D(A[6]), .ISO(B[6]), .Q(n82) );
  INVX0 U55 ( .IN(n18), .QN(n16) );
  NOR2X2 U56 ( .IN1(A[3]), .IN2(B[3]), .QN(n27) );
  NAND2X2 U57 ( .IN1(n68), .IN2(n33), .QN(n31) );
  NAND2X0 U58 ( .IN1(n18), .IN2(n82), .QN(n9) );
  INVX0 U59 ( .IN(n79), .QN(n86) );
  AND2X1 U60 ( .IN1(A[4]), .IN2(B[4]), .Q(n65) );
  AND2X1 U61 ( .IN1(A[0]), .IN2(B[0]), .Q(n66) );
  NOR2X2 U62 ( .IN1(n71), .IN2(n26), .QN(n85) );
  NOR2X2 U63 ( .IN1(A[1]), .IN2(B[1]), .QN(n32) );
  NAND2X1 U64 ( .IN1(A[3]), .IN2(B[3]), .QN(n28) );
  NAND2X1 U65 ( .IN1(A[5]), .IN2(B[5]), .QN(n21) );
  NOR2X2 U66 ( .IN1(A[4]), .IN2(B[4]), .QN(n23) );
  NOR2X2 U67 ( .IN1(A[2]), .IN2(B[2]), .QN(n29) );
  NAND2X2 U68 ( .IN1(n66), .IN2(n67), .QN(n68) );
  AOINVX2 U69 ( .IN(n32), .QN(n67) );
  NAND2X0 U70 ( .IN1(A[1]), .IN2(B[1]), .QN(n33) );
  AND2X1 U71 ( .IN1(n31), .IN2(n25), .Q(n72) );
  INVX2 U72 ( .IN(n31), .QN(n69) );
  NOR2X4 U73 ( .IN1(n69), .IN2(n70), .QN(n71) );
  AOINVX1 U74 ( .IN(n25), .QN(n70) );
  NOR2X2 U75 ( .IN1(n72), .IN2(n26), .QN(n1) );
  NOR2X2 U76 ( .IN1(n29), .IN2(n27), .QN(n25) );
  NAND2X2 U77 ( .IN1(A[2]), .IN2(B[2]), .QN(n30) );
  NAND2X2 U78 ( .IN1(n65), .IN2(n74), .QN(n75) );
  INVX0 U79 ( .IN(n65), .QN(n73) );
  NAND2X2 U80 ( .IN1(n75), .IN2(n21), .QN(n79) );
  XNOR2X1 U81 ( .IN1(n76), .IN2(n84), .Q(SUM[5]) );
  OA21X2 U82 ( .IN1(n23), .IN2(n1), .IN3(n73), .Q(n76) );
  XOR2X1 U83 ( .IN1(n77), .IN2(n78), .Q(SUM[6]) );
  OA21X2 U84 ( .IN1(n16), .IN2(n1), .IN3(n86), .Q(n77) );
  NAND2X0 U85 ( .IN1(n82), .IN2(n14), .QN(n78) );
  AOI21X1 U86 ( .IN1(n79), .IN2(n82), .IN3(n12), .QN(n10) );
  INVX0 U87 ( .IN(n14), .QN(n12) );
  XNOR2X1 U88 ( .IN1(n83), .IN2(n81), .Q(SUM[7]) );
  AND2X1 U89 ( .IN1(n80), .IN2(n7), .Q(n81) );
  OA21X2 U90 ( .IN1(n9), .IN2(n85), .IN3(n10), .Q(n83) );
  NAND2X0 U91 ( .IN1(A[7]), .IN2(B[7]), .QN(n7) );
endmodule


module accuracy_configurable_adder_16bit_DW01_add_8 ( A, B, CI, SUM, CO );
  input [8:0] A;
  input [8:0] B;
  output [8:0] SUM;
  input CI;
  output CO;
  wire   n1, n3, n5, n7, n8, n9, n10, n11, n12, n14, n18, n19, n21, n22, n23,
         n25, n26, n28, n29, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40,
         n41, n42, n43, n44, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83,
         n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97,
         n98, n99;

  XOR2X1 U33 ( .IN1(n98), .IN2(n5), .Q(SUM[4]) );
  NOR2X4 U42 ( .IN1(A[3]), .IN2(B[3]), .QN(n33) );
  NAND2X2 U53 ( .IN1(n78), .IN2(n97), .QN(n79) );
  NOR2X1 U54 ( .IN1(n28), .IN2(n25), .QN(n23) );
  NOR2X4 U55 ( .IN1(n75), .IN2(n76), .QN(n97) );
  NOR2X1 U56 ( .IN1(A[6]), .IN2(B[6]), .QN(n18) );
  INVX2 U57 ( .IN(n92), .QN(n81) );
  NOR2X2 U58 ( .IN1(n21), .IN2(n98), .QN(n75) );
  OAI21X2 U59 ( .IN1(n33), .IN2(n36), .IN3(n34), .QN(n32) );
  OAI21X1 U60 ( .IN1(n40), .IN2(n38), .IN3(n39), .QN(n37) );
  NAND2X1 U61 ( .IN1(A[3]), .IN2(B[3]), .QN(n34) );
  NOR2X4 U62 ( .IN1(A[1]), .IN2(B[1]), .QN(n38) );
  NOR2X1 U63 ( .IN1(A[7]), .IN2(B[7]), .QN(n11) );
  NOR2X1 U64 ( .IN1(A[4]), .IN2(B[4]), .QN(n28) );
  OAI21X1 U65 ( .IN1(n96), .IN2(n18), .IN3(n19), .QN(n74) );
  INVX0 U66 ( .IN(n25), .QN(n43) );
  NAND2X4 U67 ( .IN1(n86), .IN2(n95), .QN(n89) );
  INVX2 U68 ( .IN(n94), .QN(n86) );
  NAND2X4 U69 ( .IN1(n81), .IN2(n93), .QN(n84) );
  OA21X2 U70 ( .IN1(n29), .IN2(n25), .IN3(n26), .Q(n96) );
  NAND2X1 U71 ( .IN1(A[5]), .IN2(B[5]), .QN(n26) );
  NOR2X2 U72 ( .IN1(A[5]), .IN2(B[5]), .QN(n25) );
  INVX0 U73 ( .IN(n11), .QN(n41) );
  NOR2X0 U74 ( .IN1(n35), .IN2(n33), .QN(n31) );
  NAND2X2 U75 ( .IN1(A[4]), .IN2(B[4]), .QN(n29) );
  NAND2X0 U76 ( .IN1(n43), .IN2(n26), .QN(n95) );
  NAND2X2 U77 ( .IN1(n77), .IN2(n3), .QN(n80) );
  NAND2X2 U78 ( .IN1(n83), .IN2(n84), .QN(SUM[7]) );
  OAI21X1 U79 ( .IN1(n29), .IN2(n25), .IN3(n26), .QN(n99) );
  AOI21X1 U80 ( .IN1(n37), .IN2(n31), .IN3(n32), .QN(n98) );
  NOR2X0 U81 ( .IN1(A[2]), .IN2(B[2]), .QN(n35) );
  NAND2X2 U82 ( .IN1(A[1]), .IN2(B[1]), .QN(n39) );
  AOI21X2 U83 ( .IN1(n37), .IN2(n31), .IN3(n32), .QN(n1) );
  INVX0 U84 ( .IN(n22), .QN(n76) );
  NOR2X2 U85 ( .IN1(n14), .IN2(n1), .QN(n85) );
  INVX0 U86 ( .IN(n3), .QN(n78) );
  INVX2 U87 ( .IN(n97), .QN(n77) );
  NAND2X2 U88 ( .IN1(n80), .IN2(n79), .QN(SUM[6]) );
  NAND2X1 U89 ( .IN1(n94), .IN2(n87), .QN(n88) );
  NAND2X2 U90 ( .IN1(n88), .IN2(n89), .QN(SUM[5]) );
  INVX0 U91 ( .IN(n95), .QN(n87) );
  NOR2X2 U92 ( .IN1(n28), .IN2(n1), .QN(n90) );
  INVX0 U93 ( .IN(n29), .QN(n91) );
  NAND2X0 U94 ( .IN1(n41), .IN2(n12), .QN(n93) );
  INVX0 U95 ( .IN(n93), .QN(n82) );
  NAND2X0 U96 ( .IN1(n23), .IN2(n42), .QN(n14) );
  NAND2X1 U97 ( .IN1(A[6]), .IN2(B[6]), .QN(n19) );
  NAND2X1 U98 ( .IN1(n92), .IN2(n82), .QN(n83) );
  NOR2X4 U99 ( .IN1(n85), .IN2(n74), .QN(n92) );
  NOR2X4 U100 ( .IN1(n90), .IN2(n91), .QN(n94) );
  INVX0 U101 ( .IN(n23), .QN(n21) );
  INVX0 U102 ( .IN(n18), .QN(n42) );
  NAND2X2 U103 ( .IN1(A[2]), .IN2(B[2]), .QN(n36) );
  INVX0 U104 ( .IN(n99), .QN(n22) );
  NAND2X0 U105 ( .IN1(n44), .IN2(n29), .QN(n5) );
  INVX0 U106 ( .IN(n28), .QN(n44) );
  NAND2X0 U107 ( .IN1(n42), .IN2(n19), .QN(n3) );
  OAI21X1 U108 ( .IN1(n19), .IN2(n11), .IN3(n12), .QN(n10) );
  OAI21X1 U109 ( .IN1(n7), .IN2(n1), .IN3(n8), .QN(SUM[8]) );
  NAND2X0 U110 ( .IN1(n9), .IN2(n23), .QN(n7) );
  AOI21X1 U111 ( .IN1(n99), .IN2(n9), .IN3(n10), .QN(n8) );
  NOR2X0 U112 ( .IN1(n18), .IN2(n11), .QN(n9) );
  NAND2X0 U113 ( .IN1(A[7]), .IN2(B[7]), .QN(n12) );
  NAND2X2 U114 ( .IN1(A[0]), .IN2(B[0]), .QN(n40) );
endmodule


module accuracy_configurable_adder_16bit ( clk, a, b, Cout, Sum );
  input [15:0] a;
  input [15:0] b;
  output [15:0] Sum;
  input clk;
  output Cout;
  wire   n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66,
         n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,
         n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94,
         n95, n96, n97, n98, n99, n100, n101;
  wire   [15:0] a_reg;
  wire   [15:0] b_reg;
  wire   [7:0] temp1;
  wire   [7:4] temp2;
  wire   [8:4] temp3;
  wire   SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3, 
        SYNOPSYS_UNCONNECTED__4, SYNOPSYS_UNCONNECTED__5, 
        SYNOPSYS_UNCONNECTED__6, SYNOPSYS_UNCONNECTED__7;

  accuracy_configurable_adder_16bit_DW01_add_5 add_34 ( .A({n83, a_reg[6], n95, 
        a_reg[4], n67, n73, n89, n71}), .B({n61, n58, n99, b_reg[4], n77, n81, 
        n69, n87}), .CI(1'b0), .SUM(temp1) );
  SDFFX1 \b_reg_reg[13]  ( .D(b[13]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[13]) );
  SDFFX1 \b_reg_reg[5]  ( .D(b[5]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n98)
         );
  SDFFX1 \b_reg_reg[1]  ( .D(b[1]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n68)
         );
  SDFFX1 \a_reg_reg[9]  ( .D(a[9]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n96)
         );
  SDFFX1 \a_reg_reg[5]  ( .D(a[5]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[5]), .QN(n94) );
  SDFFX1 \a_reg_reg[1]  ( .D(a[1]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n88)
         );
  SDFFX1 \a_reg_reg[13]  ( .D(a[13]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[13]) );
  SDFFX1 \b_reg_reg[0]  ( .D(b[0]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n86)
         );
  SDFFX1 \a_reg_reg[8]  ( .D(a[8]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[8]), .QN(n59) );
  SDFFX1 \a_reg_reg[12]  ( .D(a[12]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[12]) );
  SDFFX1 \b_reg_reg[4]  ( .D(b[4]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[4]), .QN(n78) );
  SDFFX1 \a_reg_reg[4]  ( .D(a[4]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[4]), .QN(n64) );
  SDFFX1 \b_reg_reg[8]  ( .D(b[8]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[8]), .QN(n74) );
  SDFFX1 \a_reg_reg[0]  ( .D(a[0]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n70)
         );
  SDFFX1 \b_reg_reg[12]  ( .D(b[12]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[12]) );
  SDFFX1 \a_reg_reg[10]  ( .D(a[10]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[10]), .QN(n53) );
  SDFFX1 \a_reg_reg[6]  ( .D(a[6]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[6]), .QN(n55) );
  SDFFX1 \b_reg_reg[10]  ( .D(b[10]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[10]), .QN(n62) );
  SDFFX1 \b_reg_reg[6]  ( .D(b[6]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[6]), .QN(n57) );
  SDFFX1 \a_reg_reg[11]  ( .D(a[11]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n84) );
  SDFFX1 \b_reg_reg[3]  ( .D(b[3]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n76)
         );
  SDFFX1 \b_reg_reg[2]  ( .D(b[2]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n80)
         );
  accuracy_configurable_adder_16bit_DW01_add_6 add_35 ( .A({n85, a_reg[10], 
        n97, n60, n83, n56, a_reg[5], n65}), .B({n91, b_reg[10], n101, n75, 
        n93, b_reg[6], n99, n79}), .CI(1'b0), .SUM({temp2, 
        SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3}) );
  accuracy_configurable_adder_16bit_DW01_add_8 add_36 ( .A({1'b0, a_reg[15:12], 
        n85, n54, n97, a_reg[8]}), .B({1'b0, b_reg[15:12], n91, n63, n101, 
        b_reg[8]}), .CI(1'b0), .SUM({temp3, SYNOPSYS_UNCONNECTED__4, 
        SYNOPSYS_UNCONNECTED__5, SYNOPSYS_UNCONNECTED__6, 
        SYNOPSYS_UNCONNECTED__7}) );
  SDFFX1 \a_reg_reg[3]  ( .D(a[3]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n66)
         );
  SDFFX1 \a_reg_reg[2]  ( .D(a[2]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n72)
         );
  SDFFX1 \Sum_reg[13]  ( .D(temp3[5]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[13]) );
  SDFFX1 \Sum_reg[9]  ( .D(temp2[5]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[9]) );
  SDFFX1 \Sum_reg[15]  ( .D(temp3[7]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[15]) );
  SDFFX1 \Sum_reg[10]  ( .D(temp2[6]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[10]) );
  SDFFX1 \Sum_reg[14]  ( .D(temp3[6]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[14]) );
  SDFFX1 \Sum_reg[11]  ( .D(temp2[7]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[11]) );
  SDFFX1 \Sum_reg[5]  ( .D(temp1[5]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[5]) );
  SDFFX1 \Sum_reg[7]  ( .D(temp1[7]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[7]) );
  SDFFX1 \Sum_reg[6]  ( .D(temp1[6]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[6]) );
  SDFFX1 \a_reg_reg[15]  ( .D(a[15]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[15]) );
  SDFFX1 \a_reg_reg[14]  ( .D(a[14]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        a_reg[14]) );
  SDFFX1 \b_reg_reg[15]  ( .D(b[15]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[15]) );
  SDFFX1 \b_reg_reg[14]  ( .D(b[14]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        b_reg[14]) );
  SDFFX1 \Sum_reg[0]  ( .D(temp1[0]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[0]) );
  SDFFX1 Cout_reg ( .D(temp3[8]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(Cout) );
  SDFFX1 \Sum_reg[12]  ( .D(temp3[4]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[12]) );
  SDFFX1 \Sum_reg[8]  ( .D(temp2[4]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[8]) );
  SDFFX1 \Sum_reg[4]  ( .D(temp1[4]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[4]) );
  SDFFX1 \Sum_reg[3]  ( .D(temp1[3]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[3]) );
  SDFFX1 \Sum_reg[2]  ( .D(temp1[2]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[2]) );
  SDFFX1 \Sum_reg[1]  ( .D(temp1[1]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(
        Sum[1]) );
  SDFFX1 \b_reg_reg[9]  ( .D(b[9]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n100)
         );
  SDFFX2 \b_reg_reg[11]  ( .D(b[11]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n90) );
  SDFFX2 \b_reg_reg[7]  ( .D(b[7]), .SI(1'b0), .SE(1'b0), .CLK(clk), .Q(n61), 
        .QN(n92) );
  SDFFX2 \a_reg_reg[7]  ( .D(a[7]), .SI(1'b0), .SE(1'b0), .CLK(clk), .QN(n82)
         );
  INVX4 U55 ( .IN(n68), .QN(n69) );
  AOINVX4 U56 ( .IN(n100), .QN(n101) );
  INVX0 U57 ( .IN(n53), .QN(n54) );
  INVX2 U58 ( .IN(n90), .QN(n91) );
  INVX2 U59 ( .IN(n94), .QN(n95) );
  INVX2 U60 ( .IN(n98), .QN(n99) );
  INVX0 U61 ( .IN(n78), .QN(n79) );
  INVX0 U62 ( .IN(n64), .QN(n65) );
  INVX2 U63 ( .IN(n80), .QN(n81) );
  INVX2 U64 ( .IN(n84), .QN(n85) );
  INVX0 U65 ( .IN(n55), .QN(n56) );
  INVX2 U66 ( .IN(n82), .QN(n83) );
  INVX0 U67 ( .IN(n57), .QN(n58) );
  INVX2 U68 ( .IN(n59), .QN(n60) );
  INVX0 U69 ( .IN(n62), .QN(n63) );
  INVX2 U70 ( .IN(n92), .QN(n93) );
  INVX2 U71 ( .IN(n66), .QN(n67) );
  INVX2 U72 ( .IN(n70), .QN(n71) );
  INVX2 U73 ( .IN(n72), .QN(n73) );
  INVX2 U74 ( .IN(n74), .QN(n75) );
  INVX2 U75 ( .IN(n76), .QN(n77) );
  INVX2 U76 ( .IN(n86), .QN(n87) );
  INVX2 U77 ( .IN(n88), .QN(n89) );
  INVX2 U78 ( .IN(n96), .QN(n97) );
endmodule

